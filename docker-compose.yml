version: '3.7'

services:
  postgres:
    image: postgres:15.2-alpine
    platform: linux/amd64
    shm_size: 1g
    restart: always
    ports:
      - ${POSTGRES__PROXY}:${POSTGRES__PORT}
    volumes:
      - .docker-volumes/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
      POSTGRES_DB: ${POSTGRES__NAME}
#      POSTGRES_HOST_AUTH_METHOD: trust #couldn't setup stuff on Win without it
#      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    healthcheck:
      test: pg_isready -d db_prod -U postgres
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  alembic:
    platform: linux/amd64
    build:
      dockerfile: docker/alembic.dockerfile
      context: ./
    volumes:
      - ./app:${VOLUME_MOUNT_PREFIX}/app
      - ./database:${VOLUME_MOUNT_PREFIX}/database
      - ./alembic:${VOLUME_MOUNT_PREFIX}/alembic
      - ./dictionaries:${VOLUME_MOUNT_PREFIX}/dictionaries
      - ./updater:${VOLUME_MOUNT_PREFIX}/updater
    depends_on:
      postgres:
        condition: service_healthy
    tty: true
    stdin_open: true

  rabbitmq:
    image: rabbitmq:3.13.2-management
    platform: linux/amd64
    hostname: ${RABBITMQ__DEFAULT_HOST}
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ__DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ__DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - ${RABBITMQ__WEB_PORT}:15672
      - ${RABBITMQ__QUEUE_PORT}:5672

  delete_consumer:
    build:
      dockerfile: docker/deleter.dockerfile
      context: ./
    environment:
      - RABBITMQ__HOST=${RABBITMQ__DEFAULT_HOST}
      - RABBITMQ__USER=${RABBITMQ__DEFAULT_USER}
      - RABBITMQ__PASSWORD=${RABBITMQ__DEFAULT_PASS}
      - RABBITMQ__QUEUE_PORT=5672
      - RABBITMQ__WEB_PORT=${RABBITMQ__WEB_PORT}
      - GRIST__SERVER=${GRIST__SERVER}
      - GRIST__DOC_ID=${GRIST__DOC_ID}
      - GRIST__API_KEY=${GRIST__API_KEY}
      - POSTGRES__HOST=${POSTGRES__HOST}
      - POSTGRES__PORT=${POSTGRES__PORT}
      - POSTGRES__USER=${POSTGRES__USER}
      - POSTGRES__PASSWORD=${POSTGRES__PASSWORD}
      - POSTGRES__NAME=${POSTGRES__NAME}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  restore_consumer:
    build:
      dockerfile: docker/restorer.dockerfile
      context: ./
    environment:
      - RABBITMQ__HOST=${RABBITMQ__DEFAULT_HOST}
      - RABBITMQ__USER=${RABBITMQ__DEFAULT_USER}
      - RABBITMQ__PASSWORD=${RABBITMQ__DEFAULT_PASS}
      - RABBITMQ__QUEUE_PORT=5672
      - RABBITMQ__WEB_PORT=${RABBITMQ__WEB_PORT}
      - GRIST__SERVER=${GRIST__SERVER}
      - GRIST__DOC_ID=${GRIST__DOC_ID}
      - GRIST__API_KEY=${GRIST__API_KEY}
      - POSTGRES__HOST=${POSTGRES__HOST}
      - POSTGRES__PORT=${POSTGRES__PORT}
      - POSTGRES__USER=${POSTGRES__USER}
      - POSTGRES__PASSWORD=${POSTGRES__PASSWORD}
      - POSTGRES__NAME=${POSTGRES__NAME}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  agreemod:
    platform: linux/amd64
    build:
      dockerfile: docker/api.dockerfile
      context: ./
    ports:
      - ${API_PROXY}:${API_PORT}
    volumes:
      - ./app:${VOLUME_MOUNT_PREFIX}/app
      - ./database:${VOLUME_MOUNT_PREFIX}/database
      - ./dictionaries:${VOLUME_MOUNT_PREFIX}/dictionaries
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  updater:
    platform: linux/amd64
    build:
      dockerfile: docker/updater.dockerfile
      context: ./
    environment:
      - RABBITMQ__HOST=${RABBITMQ__DEFAULT_HOST}
      - RABBITMQ__USER=${RABBITMQ__DEFAULT_USER}
      - RABBITMQ__PASSWORD=${RABBITMQ__DEFAULT_PASS}
      - RABBITMQ__QUEUE_PORT=5672
      - RABBITMQ__WEB_PORT=${RABBITMQ__WEB_PORT}
    volumes:
      - ./grist_updater:${VOLUME_MOUNT_PREFIX}/grist_updater
      - ./database:${VOLUME_MOUNT_PREFIX}/database
      - ./dictionaries:${VOLUME_MOUNT_PREFIX}/dictionaries
      - ./rabbit:${VOLUME_MOUNT_PREFIX}/rabbit
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  bot:
    platform: linux/amd64
    build:
      dockerfile: docker/telegram_bot.dockerfile
      context: ./
    volumes:
      - ./app:${VOLUME_MOUNT_PREFIX}/app
      - ./bot:${VOLUME_MOUNT_PREFIX}/bot
      - ./database:${VOLUME_MOUNT_PREFIX}/database
      - ./dictionaries:${VOLUME_MOUNT_PREFIX}/dictionaries
      - ./rabbit:${VOLUME_MOUNT_PREFIX}/rabbit

  restarter:
    image: docker:cli
    restart: unless-stopped
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
    entrypoint: ["/bin/sh","-c"]
    command:
      - |
        while true; do
          if [ "$$(date +'%H:%M')" = '00:00' ]; then
            docker restart updater
          fi
          sleep 60
        done
